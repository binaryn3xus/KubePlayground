<!DOCTYPE html>
<html>
<head>
    <title>Job Play</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include SignalR library from CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
</head>
<body>

    <nav class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0">
        <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">Company name</a>
        <input class="form-control form-control-dark w-100" type="text" placeholder="Search" aria-label="Search">
        <ul class="navbar-nav px-3">
            <li class="nav-item text-nowrap">
                <a class="nav-link" href="#">Sign out</a>
            </li>
        </ul>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-2 d-none d-md-block bg-light sidebar">
                <div class="sidebar-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
                                Dashboard <span class="sr-only">(current)</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>
                                Orders
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shopping-cart" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path></svg>
                                Products
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                                Customers
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bar-chart-2" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line></svg>
                                Reports
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-layers" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><polygon points="12 2 2 7 12 12 22 7 12 2"></polygon><polyline points="2 17 12 22 22 17"></polyline><polyline points="2 12 12 17 22 12"></polyline></svg>
                                Integrations
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
                <div style="position: absolute; inset: 0px; overflow: hidden; pointer-events: none; visibility: hidden; z-index: -1;" class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="chartjs-size-monitor-shrink" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div></div>
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
                    <h1 class="h2">Dashboard</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <div class="btn-group mr-2">
                            <button class="btn btn-sm btn-outline-secondary">Share</button>
                            <button class="btn btn-sm btn-outline-secondary">Export</button>
                        </div>
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-calendar" style="--darkreader-inline-stroke: currentColor;" data-darkreader-inline-stroke=""><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                            This week
                        </button>
                    </div>
                </div>

                <div id="showLogs" style="min-height: 20em; max-height: 25em; overflow: scroll;white-space: nowrap; border: solid red 1px"></div>

                <h2>Section title</h2>
                <div class="row">
                    <div class="col-md-6">
                        <div class="table-responsive">
                            <table id="jobsList" class="table table-striped table-sm">
                                <thead>
                                    <tr>
                                        <th>Jobs</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="table-responsive">
                            <table id="podsList" class="table table-striped table-sm">
                                <thead>
                                    <tr>
                                        <th>Pods Related To Job</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>

        let signalRConnection = null;

        document.addEventListener("DOMContentLoaded", function () {
            fetch('http://localhost:5225/k8s/jobs')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);
                    const jobsList = document.querySelector('#jobsList tbody');

                    // Remove all existing rows from the table
                    while (jobsList.firstChild) {
                        jobsList.removeChild(jobsList.firstChild);
                    }

                    data.forEach(job => {
                        // Create a new row
                        let row = document.createElement('tr');

                        // Create a cell for the job
                        let cell = document.createElement('td');
                        cell.textContent = job;
                        cell.setAttribute('data-jobname', job);
                        cell.onclick = function () {
                            GetPodsForJob(this.getAttribute('data-jobname'));
                        };

                        // Append the cell to the row
                        row.appendChild(cell);

                        // Append the row to the table body
                        jobsList.appendChild(row);
                    });

                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation: ', error);
                });
        });

        function GetPodsForJob(jobName) {
            fetch('http://localhost:5225/k8s/pods')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);
                    data.forEach(pod => {
                        const podsList = document.querySelector('#podsList tbody');

                        // Remove all existing rows from the table
                        while (podsList.firstChild) {
                            podsList.removeChild(podsList.firstChild);
                        }

                        data.forEach(pod => {
                            if (pod.startsWith(jobName)) {

                                // Create a new row
                                let row = document.createElement('tr');

                                // Create a cell for the pod
                                let cell = document.createElement('td');
                                cell.textContent = pod;
                                cell.setAttribute('data-podname', pod);
                                cell.onclick = function () {
                                    GetLogsForPod(this.getAttribute('data-podname'));
                                };

                                // Append the cell to the row
                                row.appendChild(cell);

                                // Append the row to the table body
                                podsList.appendChild(row);
                            }
                        });
                    });
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation: ', error);
                });
        }

        // function GetLogsForPod(podName) {
        //     try {
        //         // Check if SignalR is loaded correctly
        //         if (!signalR) {
        //             throw new Error("SignalR not loaded.");
        //         }
        //     } catch (e) {
        //         console.error(e.toString());
        //         return;
        //     }

        //     if (signalRConnection && signalRConnection.state === signalR.HubConnectionState.Connected) {
        //         console.log("Killing Previous SignalR connection.");
        //         signalRConnection.
        //         return;
        //     }

        //     // Establish connection with SignalR hub
        //     signalRConnection = new signalR.HubConnectionBuilder().withUrl("/kubernetesLogs").build();

        //     console.log("")
        //     signalRConnection.on("ReceiveLog", function (line) {
        //         let showLogsDiv = document.getElementById("showLogs");
        //         let newLog = document.createElement("div");
        //         newLog.textContent = line;
        //         showLogsDiv.appendChild(newLog);

        //         // Scroll to the bottom
        //         showLogsDiv.scrollTop = showLogsDiv.scrollHeight;
        //     });

        //     signalRConnection.start().then(function () {
        //         console.log("Connected to SignalR hub successfully.");
        //         signalRConnection.invoke("StreamLogs", podName, "default");
        //     }).catch(function (err) {
        //         console.error("Error with signalR");
        //         return console.error(err.toString());
        //     });
        // }

        async function GetLogsForPod(podName) {
            try {
                const signalRManager = new SignalRConnectionManager("/kubernetesLogs");
                const logViewer = new LogViewer("showLogs");

                await signalRManager.connect();
                const connection = signalRManager.getConnection();

                connection.on("ReceiveLog", function (line) {
                    logViewer.addLogLine(line);
                });

                await connection.invoke("StreamLogs", podName, "default");
            } catch (e) {
                console.error(e.toString());
            }
        }

        class SignalRConnectionManager {
            constructor(url) {
                this.url = url;
                this.connection = null;
            }

            async connect() {
                if (this.connection && this.connection.state === signalR.HubConnectionState.Connected) {
                    console.log("SignalR connection already established.");
                    return;
                }

                this.connection = new signalR.HubConnectionBuilder().withUrl(this.url).build();
                try {
                    await this.connection.start();
                    console.log("Connected to SignalR hub successfully.");
                } catch (err) {
                    console.error("Error establishing SignalR connection:", err);
                    throw err;
                }
            }

            async disconnect() {
                if (!this.connection) {
                    console.log("No SignalR connection to disconnect.");
                    return;
                }

                try {
                    await this.connection.stop();
                    console.log("Disconnected SignalR connection successfully.");
                } catch (err) {
                    console.error("Error disconnecting SignalR connection:", err);
                    throw err;
                }
            }

            getConnection() {
                return this.connection;
            }
        }

        class LogViewer {
            constructor(containerId) {
                this.container = document.getElementById(containerId);
                this.container.innerHTML = '';
            }

            addLogLine(line) {
                let newLog = document.createElement("div");
                newLog.textContent = line;
                this.container.appendChild(newLog);
                this.container.scrollTop = this.container.scrollHeight;
            }
        }

    </script>

</body>
</html>